{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["C","props","react_default","a","createElement","Object","assign","className","title","v","label","inf","D","p","children","U","style","border","backgroundSize","backgroundImage","concat","K","borderColor","N","enhance","o","keys","forEach","key","img","console","log","terrain","wooden","gun","mort","art","stuka","stone","hedgerow","woods","foxhole","foxhole_in_woods","fortified","pillbox","truck","dike_road","situation","orchards","conceal","adjacent","open1_4","open5_8","open9","higher","lower","final_op","smoke","dispersed_smoke","cell","s","objectSpread","color","textShadow","size","App","state","undefined","renderTerrain","App_C","_this","onClick","toggleTerrain","renderSituation","toggleSituation","newSituation","setState","t","this","App_D","App_U","App_K","App_N","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ad4ef05.chunk.js","sourcesContent":["import React, { Component, CSSProperties } from 'react';\nimport './App.css';\n\nconst C = (props: { v: Modifier, style?: CSSProperties, onClick?: any }) =>\n  <div className=\"c\" {...props} title={props.v.label}>\n    <div className=\"v\">{props.v.inf > 0 && '+'}{props.v.inf}</div>\n  </div>\n\nconst D = (p: { children: any }) =>\n  <div className=\"c\" >\n    <div className=\"v\">{p.children}</div>\n  </div>\nconst U = (p: { children: any }) =>\n  <div className=\"c\" style={{\n    border: 'none',\n    backgroundSize: 'cover',\n    backgroundImage: `url(img/${p.children})`,\n  }}>\n    <div className=\"v\">{p.children}</div>\n  </div>\n\nconst K = (p: { children: any }) =>\n  <div className=\"c\" style={{\n    borderColor: 'gray'\n  }}>\n    <div className=\"v\">{p.children}</div>\n  </div>\nconst N = () => <div className=\"c\"><div className=\"v\" /></div>\n\ntype Modifiers = { [key: string]: Modifier };\n\nconst enhance = (o: Modifiers): Modifiers => {\n  Object.keys(o).forEach(key => {\n    o[key] = Object.assign({ label: key }, o[key], { key });\n    if (!o[key].img) {\n      o[key].img = `${key}.png`;\n    }\n  })\n  console.log(o);\n  return o;\n}\ninterface Modifier {\n  inf: number;\n  gun?: number;\n  mort?: number;\n  art?: number;\n  stuka?: number;\n  label?: string;\n  img?: string;\n  key: string;\n}\n\nconst terrain = {\n  wooden: { inf: -1, gun: -1, mort: -1, art: -1, stuka: -1, label: 'wooden building', key: '' },\n  stone: { label: 'stone building', inf: -2, gun: -2, mort: -2, art: -2, stuka: -2, key: '' },\n  hedgerow: { inf: -2, gun: -2, mort: 0, art: 0, stuka: 0, key: '' },\n  woods: { inf: -1, key: '' },\n  foxhole: { inf: -2, key: '' },\n  foxhole_in_woods: { inf: -2, key: '' },\n  fortified: { inf: -3, key: '' },\n  pillbox: { inf: -3, key: '' },\n  truck: { inf: -2, key: '' },\n  dike_road: { inf: -2, img: 'road.png', key: '' },\n};\nenhance(terrain);\nconst situation = {\n  orchards: { inf: 0, key: '' },\n  conceal: { inf: -1, gun: -1, mort: -1, art: -1, key: '' },\n  adjacent: { inf: +3, key: '' },\n  open1_4: { inf: +4, img: 'open.png', key: '' },\n  open5_8: { inf: +2, img: 'open.png', key: '' },\n  open9: { inf: 0, img: 'open.png', key: '' },\n  higher: { inf: -1, img: 'elevation.png', key: '' },\n  lower: { inf: +1, img: 'elevation.png', key: '' },\n  final_op: { inf: -2, key: '' },\n  smoke: { inf: -1, key: '' },\n  dispersed_smoke: { inf: 0, key: '' },\n};\nenhance(situation);\ntype SituationType = keyof typeof situation;\ntype SituationFlags = {\n  [key in SituationType]?: boolean;\n};\n\nconst outline = (size: number, color: string) => `\n  -${size}px -${size}px 0 ${color},\n  ${size}px -${size}px 0 ${color},\n  -${size}px ${size}px 0 ${color}, \n  ${size}px ${size}px 0 ${color}`;\n\nconst cell = (v: Modifier, s: CSSProperties) => ({\n  ...s,\n  color: 'white',\n  textShadow: outline(1, '#000'),\n  backgroundSize: 'cover',\n  backgroundImage: `url(img/${v.img})`,\n})\n\nclass App extends React.Component<{}, {\n  terrain: string | undefined;\n  situation: SituationFlags;\n}> {\n  state = {\n    terrain: undefined,\n    situation: {}\n  }\n\n  renderTerrain = (v: Modifier) => <C\n    v={v}\n    style={cell(v, {\n      border: this.state.terrain === v.key ? '2vw solid blue' : 'none',\n    })}\n    onClick={() => this.toggleTerrain(v)}\n  />\n\n\n  renderSituation = (v: Modifier) => {\n    const situation: { [key: string]: boolean } = this.state.situation;\n    return <C\n      v={v}\n      style={cell(v, {\n        border: situation[v.key] ? '2vw solid yellow' : 'none',\n      })}\n      onClick={() => this.toggleSituation(v.key as SituationType)} />\n  }\n\n\n  toggleSituation = (v: SituationType) => {\n    console.log(v);\n    const newSituation: SituationFlags = Object.assign({}, this.state.situation);\n    newSituation[v] = !newSituation[v];\n    if (newSituation[v]) {\n      if (v === situation.lower.key) {\n        newSituation.higher = false;\n      } else if (v === situation.higher.key) {\n        newSituation.lower = false;\n      } else if (v === situation.smoke.key) {\n        newSituation.dispersed_smoke = false;\n      } else if (v === situation.dispersed_smoke.key) {\n        newSituation.smoke = false;\n      }\n    }\n    this.setState({\n      situation: newSituation\n    });\n  }\n\n  toggleTerrain = (v: Modifier) => {\n    this.setState({\n      terrain: this.state.terrain === v.key ? undefined : v.key\n    });\n  }\n\n  render() {\n    const t = this.renderTerrain;\n    const s = this.renderSituation;\n    return <div className=\"g\">\n      {t(terrain.wooden)}   {s(situation.lower)}      {s(situation.conceal)}      <D>1-4</D> <U>I</U> <U>G</U>\n      {t(terrain.stone)}    {s(situation.higher)} {s(situation.adjacent)} <D>5-8</D> <U>I</U> <U>G/V</U>\n      {t(terrain.hedgerow)} {t(terrain.pillbox)} {s(situation.open1_4)} <D>> 8</D> <U>I</U> <U>G/V</U>\n      {t(terrain.woods)}    {t(terrain.truck)} {s(situation.open5_8)} <K>1</K> <K>2</K> <K>3</K>\n      {t(terrain.foxhole_in_woods)}  {t(terrain.dike_road)} {s(situation.open9)} <K>4</K> <K>5</K> <K>6</K>\n      {t(terrain.foxhole)} <N /> {s(situation.smoke)} <K>7</K> <K>8</K> <K>9</K>\n      {t(terrain.fortified)} <N />      {s(situation.dispersed_smoke)} <K>10</K> <K>0</K> <N />\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}